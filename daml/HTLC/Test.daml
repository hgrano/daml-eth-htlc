module HTLC.Test where

import qualified DA.Map as Map
import qualified DA.Optional as O
import qualified DA.Set as Set
import qualified Daml.Finance.Interface.Holding.Base as Holding
import qualified Daml.Finance.Interface.Holding.Transferable as Transferable 
import Daml.Finance.Interface.Types.Common.Types
import Daml.Finance.Holding.Fungible
import Daml.Script
import HTLC

data TestParties = TestParties
  with
    alice : Party
    bob : Party
    depository : Party
    issuer : Party
    custodian : Party
  deriving (Show, Eq)

data TestData = TestData
  with
    parties : TestParties
    transferrableCid : ContractId Transferable.I -- Alice's holding
    aliceAccount : AccountKey
    bobAccount : AccountKey
    startTime : Time
  deriving (Show, Eq)

withSetup : (TestData -> Script a) -> Script ()
withSetup test = do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  depository <- allocateParty "depository"
  issuer <- allocateParty "issuer"
  custodian <- allocateParty "custodian"
  let aliceAccount = AccountKey with
        custodian
        owner = alice
        id = Id "Alice@custodian"
      bobAccount = AccountKey with
        custodian
        owner = bob
        id = Id "Bob@custodian"
  transferrableCid <- submitMulti [alice, custodian] [] $
    createCmd Fungible with
      instrument = InstrumentKey with
        depository
        issuer
        id = Id "fungible1"
        version = "0"
      account = aliceAccount
      amount = 1.0
      lock = None
      observers = Map.fromList [("HTLC", Set.fromList [bob])]
  startTime <- getTime
  test $ TestData with
    parties = TestParties with alice, bob, depository, issuer, custodian
    transferrableCid = toInterfaceContractId transferrableCid
    aliceAccount
    bobAccount
    startTime
  pure ()

test_HTLC_multisig : Script ()
test_HTLC_multisig = withSetup $ \testData -> do
  submitMustFail testData.parties.alice do
    createCmd HTLC with
      sender = testData.parties.alice
      receiverAccount = testData.bobAccount
      holdingCid = testData.transferrableCid
      hash = "hash"
      unlockTime = testData.startTime

test_HTLC_accept_holding_validation : Script ()
test_HTLC_accept_holding_validation = withSetup $ \testData -> do
  -- Holding is not owned by the sender
  proposalCid <- submit testData.parties.bob $ createCmd HTLCProposal with
    sender = testData.parties.bob
    senderEthAddress = "..."
    receiver = testData.parties.alice
    ethTokenAddress = "..."
    ethTokenQuantity = "..."
    holdingCid = testData.transferrableCid
    hash = "..."
    unlockTime = testData.startTime
  submitMustFail testData.parties.alice $ exerciseCmd proposalCid HTLCProposal_Accept with
    receiverAccount = testData.aliceAccount

test_HTLC_locking : Script ()
test_HTLC_locking = withSetup $ \testData -> do
  proposalCid <- submit testData.parties.alice $ createCmd HTLCProposal with
    sender = testData.parties.alice
    senderEthAddress = "..."
    receiver = testData.parties.bob
    ethTokenAddress = "..."
    ethTokenQuantity = "..."
    holdingCid = testData.transferrableCid
    hash = "..."
    unlockTime = testData.startTime
  htlcCid <- submit testData.parties.bob $ exerciseCmd proposalCid HTLCProposal_Accept with
    receiverAccount = testData.bobAccount
  originalTransferable <- queryContractId testData.parties.alice testData.transferrableCid
  assertMsg "Original holding must be archived" (O.isNone originalTransferable)
  htlc <- O.fromSomeNote "HTLC contract must exist" <$> queryContractId testData.parties.alice htlcCid
  let newHoldingCid : ContractId Holding.I = toInterfaceContractId htlc.holdingCid
  newHolding : Holding.View <- O.fromSomeNote "New holding contract must exist" <$>
    queryInterfaceContractId testData.parties.alice newHoldingCid
  let lock = O.fromSomeNote "New holding contract must have lock" newHolding.lock
  assertMsg
    "Lockers must include all counter parties"
    (lock.lockers == Set.fromList [testData.parties.alice, testData.parties.bob])
  submitMustFail testData.parties.alice $ exerciseCmd htlc.holdingCid Transferable.Transfer with
    actors = Set.fromList [testData.parties.alice]
    newOwnerAccount = testData.bobAccount
  pure ()
